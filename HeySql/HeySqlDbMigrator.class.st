"
This class handles the migration of the database.

Add class methods to this starting with mig_X where x is a number as we changes the databse.
"
Class {
	#name : #HeySqlDbMigrator,
	#superclass : #Object,
	#category : #'HeySql-Migrations'
}

{ #category : #db }
HeySqlDbMigrator class >> createMigration [
	"This creates a migration with the current time as a part of the method name, remark the underscore."

	| migrateTime method |
	migrateTime := self getNow.
	method := '
	   migrate_{1}
	   "HeySql autogenerated method for adding a migration. Add your code below here."
	' format: {migrateTime}.
	DbMigrations class compile: method classified: 'db-migration'
]

{ #category : #db }
HeySqlDbMigrator class >> createMigrationTemplate: packageName [
	"Based on the package name - iterate over all classes in the package and write templates for creating corresponding tb-tables, based on the instance vars. This method is just for now writing to much code when bootstrapping a project.
	Use like this: HeySqlDbMigrator createMigrationTemplate: 'Sakuraeco-Models'.
	Remark that there are no dependency analysys between the tables, so the output order of the tables is random 
	"

	| classes |
	Transcript clear.
	classes := Smalltalk allClassesAndTraits
		select: [ :theClass | 
			| className |
			className := theClass category asString.
			(className beginsWith: packageName)
				& ((className findString: 'Manifest') = 0) ].
	classes
		do: [ :c | 
			| vars table |
			Transcript
				show:
					('\\\\"-- Generated code for class: {1}"
		' format: {c asString}) withCRs.
			vars := (((c allSuperclasses , {c}
				flatCollect: [ :f | f instVarNames ])
				collect: [ :v | '         ( ''{1}'' -> ''type'')' format: {v asString} ])
				joinUsing: ' . \') withCRs.
			table := 'table := \{ \\{1} \\       \} asDictionary. \
			
	    HeySql createTable: ''{2}'' tableDict: table.
			
			'
				format:
					{vars.
					c asString}.
			Transcript show: table withCRs ]
]

{ #category : #private }
HeySqlDbMigrator class >> getNow [
	"returns now in migrate format"

	^ (ZTimestamp now asString copyReplaceAll: '-' with: '_')
		copyReplaceAll: ':'
		with: '_'
]

{ #category : #db }
HeySqlDbMigrator class >> migrate: migrateStart to: migrateStop [
	"Used to run migratios. Use like this:
	DbMigrator migrate: '2019_10_06T11_15_16Z' to:  '2019_11_06T11_15_16Z'
	
	Note! Library does not check if these migrations allready has been run (will maybe be added soon)
	"

	"use this to get the instance methods: Person methodDict keys."

	| migrateMethods |
	migrateMethods := DbMigrations class selectors
		select:
			[ :m | 
			| t |
			t := m asString copyFrom: 9 to: 28.
			(m asString beginsWith: 'migrate_') & (t >= migrateStart)
				& (t <= migrateStop) ].
			 self migrateSome: migrateMethods
]

{ #category : #private }
HeySqlDbMigrator class >> migrateSome: migrateMethods [
	"Migrate one or many methods"

	| client |
	client := HeySql connection.
	client execute: 'begin transaction;'.
	[ migrateMethods asSortedCollection
		do: [ :method | DbMigrations perform: method ] ]
		on: Exception
		do: [ :ex | 
			client execute: 'rollback;'.
			ex pass ].
	client execute: 'commit;'
]
